CHINOOK DATABASE

Table: Album

Description: 
The Album table contains information about albums, including the album ID, title, and the ID of the artist who created it. The album ID uniquely identifies each album, and the artist ID establishes a foreign key relationship with the Artist table. The title is limited to 160 characters.

Use Case: 
The main use case for this table is to store and manage information about albums, including their titles, artist IDs, and album IDs, allowing for efficient querying and retrieval of album data in conjunction with artist data.

Schema: 
CREATE TABLE [Album]
(
    [AlbumId] INTEGER  NOT NULL,
    [Title] NVARCHAR(160)  NOT NULL,
    [ArtistId] INTEGER  NOT NULL,
    CONSTRAINT [PK_Album] PRIMARY KEY  ([AlbumId]),
    FOREIGN KEY ([ArtistId]) REFERENCES [Artist] ([ArtistId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'AlbumId': 1, 'Title': 'For Those About To Rock We Salute You', 'ArtistId': 1}
{'AlbumId': 2, 'Title': 'Balls to the Wall', 'ArtistId': 2}
{'AlbumId': 3, 'Title': 'Restless and Wild', 'ArtistId': 2}
{'AlbumId': 4, 'Title': 'Let There Be Rock', 'ArtistId': 1}
{'AlbumId': 5, 'Title': 'Big Ones', 'ArtistId': 3}


Table: Artist

Description: 
The Artist table stores information about different artists, including their unique ArtistId and artist name. The ArtistId is an integer and the Name is a string of up to 120 characters. The table has a primary key constraint on ArtistId.

Use Case: 
The main use case for this table is to store and manage information about various artists, such as their names, IDs, and possibly other attributes like genres, birthdates, or album information.

Schema: 
CREATE TABLE [Artist]
(
    [ArtistId] INTEGER  NOT NULL,
    [Name] NVARCHAR(120),
    CONSTRAINT [PK_Artist] PRIMARY KEY  ([ArtistId])
)

Sample:
{'ArtistId': 1, 'Name': 'AC/DC'}
{'ArtistId': 2, 'Name': 'Accept'}
{'ArtistId': 3, 'Name': 'Aerosmith'}
{'ArtistId': 4, 'Name': 'Alanis Morissette'}
{'ArtistId': 5, 'Name': 'Alice In Chains'}


Table: Customer

Description: 
The Customer table stores information about customers, including their contact details, company affiliation, and support representative. The table includes columns for customer ID, first name, last name, company name, address, city, state, country, postal code, phone number, fax number, email address, and support representative ID.

Use Case: 
This table is used to store and manage customer data, allowing for the tracking of customer interactions, support requests, and other business operations related to customer relationships.

Schema: 
CREATE TABLE [Customer]
(
    [CustomerId] INTEGER  NOT NULL,
    [FirstName] NVARCHAR(40)  NOT NULL,
    [LastName] NVARCHAR(20)  NOT NULL,
    [Company] NVARCHAR(80),
    [Address] NVARCHAR(70),
    [City] NVARCHAR(40),
    [State] NVARCHAR(40),
    [Country] NVARCHAR(40),
    [PostalCode] NVARCHAR(10),
    [Phone] NVARCHAR(24),
    [Fax] NVARCHAR(24),
    [Email] NVARCHAR(60)  NOT NULL,
    [SupportRepId] INTEGER,
    CONSTRAINT [PK_Customer] PRIMARY KEY  ([CustomerId]),
    FOREIGN KEY ([SupportRepId]) REFERENCES [Employee] ([EmployeeId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'CustomerId': 1, 'FirstName': 'Luís', 'LastName': 'Gonçalves', 'Company': 'Embraer - Empresa Brasileira de Aeronáutica S.A.', 'Address': 'Av. Brigadeiro Faria Lima, 2170', 'City': 'São José dos Campos', 'State': 'SP', 'Country': 'Brazil', 'PostalCode': '12227-000', 'Phone': '+55 (12) 3923-5555', 'Fax': '+55 (12) 3923-5566', 'Email': 'luisg@embraer.com.br', 'SupportRepId': 3}
{'CustomerId': 2, 'FirstName': 'Leonie', 'LastName': 'Köhler', 'Company': None, 'Address': 'Theodor-Heuss-Straße 34', 'City': 'Stuttgart', 'State': None, 'Country': 'Germany', 'PostalCode': '70174', 'Phone': '+49 0711 2842222', 'Fax': None, 'Email': 'leonekohler@surfeu.de', 'SupportRepId': 5}
{'CustomerId': 3, 'FirstName': 'François', 'LastName': 'Tremblay', 'Company': None, 'Address': '1498 rue Bélanger', 'City': 'Montréal', 'State': 'QC', 'Country': 'Canada', 'PostalCode': 'H2G 1A7', 'Phone': '+1 (514) 721-4711', 'Fax': None, 'Email': 'ftremblay@gmail.com', 'SupportRepId': 3}
{'CustomerId': 4, 'FirstName': 'Bjørn', 'LastName': 'Hansen', 'Company': None, 'Address': 'Ullevålsveien 14', 'City': 'Oslo', 'State': None, 'Country': 'Norway', 'PostalCode': '0171', 'Phone': '+47 22 44 22 22', 'Fax': None, 'Email': 'bjorn.hansen@yahoo.no', 'SupportRepId': 4}
{'CustomerId': 5, 'FirstName': 'František', 'LastName': 'Wichterlová', 'Company': 'JetBrains s.r.o.', 'Address': 'Klanova 9/506', 'City': 'Prague', 'State': None, 'Country': 'Czech Republic', 'PostalCode': '14700', 'Phone': '+420 2 4172 5555', 'Fax': '+420 2 4172 5555', 'Email': 'frantisekw@jetbrains.com', 'SupportRepId': 4}


Table: Employee

Description: 
The Employee table contains information about employees in a company, including their ID, name, title, department, birthdate, hire date, address, city, state, country, postal code, phone number, fax number, and email address. The table also includes a foreign key referencing the Employee table, indicating that an employee reports to another employee.

Use Case: 
This table is used to store and manage employee data, enabling the tracking of employee relationships, reporting, and other organizational tasks.

Schema: 
CREATE TABLE [Employee]
(
    [EmployeeId] INTEGER  NOT NULL,
    [LastName] NVARCHAR(20)  NOT NULL,
    [FirstName] NVARCHAR(20)  NOT NULL,
    [Title] NVARCHAR(30),
    [ReportsTo] INTEGER,
    [BirthDate] DATETIME,
    [HireDate] DATETIME,
    [Address] NVARCHAR(70),
    [City] NVARCHAR(40),
    [State] NVARCHAR(40),
    [Country] NVARCHAR(40),
    [PostalCode] NVARCHAR(10),
    [Phone] NVARCHAR(24),
    [Fax] NVARCHAR(24),
    [Email] NVARCHAR(60),
    CONSTRAINT [PK_Employee] PRIMARY KEY  ([EmployeeId]),
    FOREIGN KEY ([ReportsTo]) REFERENCES [Employee] ([EmployeeId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'EmployeeId': 1, 'LastName': 'Adams', 'FirstName': 'Andrew', 'Title': 'General Manager', 'ReportsTo': None, 'BirthDate': '1962-02-18 00:00:00', 'HireDate': '2002-08-14 00:00:00', 'Address': '11120 Jasper Ave NW', 'City': 'Edmonton', 'State': 'AB', 'Country': 'Canada', 'PostalCode': 'T5K 2N1', 'Phone': '+1 (780) 428-9482', 'Fax': '+1 (780) 428-3457', 'Email': 'andrew@chinookcorp.com'}
{'EmployeeId': 2, 'LastName': 'Edwards', 'FirstName': 'Nancy', 'Title': 'Sales Manager', 'ReportsTo': 1, 'BirthDate': '1958-12-08 00:00:00', 'HireDate': '2002-05-01 00:00:00', 'Address': '825 8 Ave SW', 'City': 'Calgary', 'State': 'AB', 'Country': 'Canada', 'PostalCode': 'T2P 2T3', 'Phone': '+1 (403) 262-3443', 'Fax': '+1 (403) 262-3322', 'Email': 'nancy@chinookcorp.com'}
{'EmployeeId': 3, 'LastName': 'Peacock', 'FirstName': 'Jane', 'Title': 'Sales Support Agent', 'ReportsTo': 2, 'BirthDate': '1973-08-29 00:00:00', 'HireDate': '2002-04-01 00:00:00', 'Address': '1111 6 Ave SW', 'City': 'Calgary', 'State': 'AB', 'Country': 'Canada', 'PostalCode': 'T2P 5M5', 'Phone': '+1 (403) 262-3443', 'Fax': '+1 (403) 262-6712', 'Email': 'jane@chinookcorp.com'}
{'EmployeeId': 4, 'LastName': 'Park', 'FirstName': 'Margaret', 'Title': 'Sales Support Agent', 'ReportsTo': 2, 'BirthDate': '1947-09-19 00:00:00', 'HireDate': '2003-05-03 00:00:00', 'Address': '683 10 Street SW', 'City': 'Calgary', 'State': 'AB', 'Country': 'Canada', 'PostalCode': 'T2P 5G3', 'Phone': '+1 (403) 263-4423', 'Fax': '+1 (403) 263-4289', 'Email': 'margaret@chinookcorp.com'}
{'EmployeeId': 5, 'LastName': 'Johnson', 'FirstName': 'Steve', 'Title': 'Sales Support Agent', 'ReportsTo': 2, 'BirthDate': '1965-03-03 00:00:00', 'HireDate': '2003-10-17 00:00:00', 'Address': '7727B 41 Ave', 'City': 'Calgary', 'State': 'AB', 'Country': 'Canada', 'PostalCode': 'T3B 1Y7', 'Phone': '1 (780) 836-9987', 'Fax': '1 (780) 836-9543', 'Email': 'steve@chinookcorp.com'}


Table: Genre

Description: 
The Genre table stores information about different music genres. It contains two columns: GenreId, which is a unique identifier for each genre, and Name, which represents the name of the genre. The data types for these columns are integer and NVARCHAR(120), respectively.

Use Case: 
This table is primarily used to store and manage a list of unique music genres, allowing for efficient querying and retrieval of genre information, such as filtering, sorting, and joining with other tables that reference this genre table.

Schema: 
CREATE TABLE [Genre]
(
    [GenreId] INTEGER  NOT NULL,
    [Name] NVARCHAR(120),
    CONSTRAINT [PK_Genre] PRIMARY KEY  ([GenreId])
)

Sample:
{'GenreId': 1, 'Name': 'Rock'}
{'GenreId': 2, 'Name': 'Jazz'}
{'GenreId': 3, 'Name': 'Metal'}
{'GenreId': 4, 'Name': 'Alternative & Punk'}
{'GenreId': 5, 'Name': 'Rock And Roll'}


Table: Invoice

Description: 
The Invoice table stores information about customer invoices, including invoice ID, customer ID, invoice date, billing address, billing city, billing state, billing country, billing postal code, and total amount. The table also includes a foreign key constraint referencing the Customer table, indicating a one-to-many relationship between invoices and customers.

Use Case: 
This table is primarily used to store and manage customer invoices, allowing for the tracking of billing information, payment history, and customer relationships. It can be used in various applications such as e-commerce platforms, accounting systems, and customer relationship management (CRM) software.

Schema: 
CREATE TABLE [Invoice]
(
    [InvoiceId] INTEGER  NOT NULL,
    [CustomerId] INTEGER  NOT NULL,
    [InvoiceDate] DATETIME  NOT NULL,
    [BillingAddress] NVARCHAR(70),
    [BillingCity] NVARCHAR(40),
    [BillingState] NVARCHAR(40),
    [BillingCountry] NVARCHAR(40),
    [BillingPostalCode] NVARCHAR(10),
    [Total] NUMERIC(10,2)  NOT NULL,
    CONSTRAINT [PK_Invoice] PRIMARY KEY  ([InvoiceId]),
    FOREIGN KEY ([CustomerId]) REFERENCES [Customer] ([CustomerId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'InvoiceId': 1, 'CustomerId': 2, 'InvoiceDate': '2021-01-01 00:00:00', 'BillingAddress': 'Theodor-Heuss-Straße 34', 'BillingCity': 'Stuttgart', 'BillingState': None, 'BillingCountry': 'Germany', 'BillingPostalCode': '70174', 'Total': 1.98}
{'InvoiceId': 2, 'CustomerId': 4, 'InvoiceDate': '2021-01-02 00:00:00', 'BillingAddress': 'Ullevålsveien 14', 'BillingCity': 'Oslo', 'BillingState': None, 'BillingCountry': 'Norway', 'BillingPostalCode': '0171', 'Total': 3.96}
{'InvoiceId': 3, 'CustomerId': 8, 'InvoiceDate': '2021-01-03 00:00:00', 'BillingAddress': 'Grétrystraat 63', 'BillingCity': 'Brussels', 'BillingState': None, 'BillingCountry': 'Belgium', 'BillingPostalCode': '1000', 'Total': 5.94}
{'InvoiceId': 4, 'CustomerId': 14, 'InvoiceDate': '2021-01-06 00:00:00', 'BillingAddress': '8210 111 ST NW', 'BillingCity': 'Edmonton', 'BillingState': 'AB', 'BillingCountry': 'Canada', 'BillingPostalCode': 'T6G 2C7', 'Total': 8.91}
{'InvoiceId': 5, 'CustomerId': 23, 'InvoiceDate': '2021-01-11 00:00:00', 'BillingAddress': '69 Salem Street', 'BillingCity': 'Boston', 'BillingState': 'MA', 'BillingCountry': 'USA', 'BillingPostalCode': '2113', 'Total': 13.86}


Table: InvoiceLine

Description: 
The InvoiceLine table stores information about individual lines on an invoice, including the invoice ID, track ID, unit price, quantity, and a unique invoice line ID. The table has foreign keys referencing the Invoice and Track tables to establish relationships between them.

Use Case: 
This table is primarily used to manage and track the details of individual invoice lines, including the items being invoiced, their quantities, and prices, in order to generate accurate invoices and track inventory levels.

Schema: 
CREATE TABLE [InvoiceLine]
(
    [InvoiceLineId] INTEGER  NOT NULL,
    [InvoiceId] INTEGER  NOT NULL,
    [TrackId] INTEGER  NOT NULL,
    [UnitPrice] NUMERIC(10,2)  NOT NULL,
    [Quantity] INTEGER  NOT NULL,
    CONSTRAINT [PK_InvoiceLine] PRIMARY KEY  ([InvoiceLineId]),
    FOREIGN KEY ([InvoiceId]) REFERENCES [Invoice] ([InvoiceId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'InvoiceLineId': 1, 'InvoiceId': 1, 'TrackId': 2, 'UnitPrice': 0.99, 'Quantity': 1}
{'InvoiceLineId': 2, 'InvoiceId': 1, 'TrackId': 4, 'UnitPrice': 0.99, 'Quantity': 1}
{'InvoiceLineId': 3, 'InvoiceId': 2, 'TrackId': 6, 'UnitPrice': 0.99, 'Quantity': 1}
{'InvoiceLineId': 4, 'InvoiceId': 2, 'TrackId': 8, 'UnitPrice': 0.99, 'Quantity': 1}
{'InvoiceLineId': 5, 'InvoiceId': 2, 'TrackId': 10, 'UnitPrice': 0.99, 'Quantity': 1}


Table: MediaType

Description: 
The MediaType table stores information about different types of media, including audio and video files. It contains two columns: MediaTypeId, a unique identifier for each media type, and Name, the name of the media type. The data types are integer for MediaTypeId and nvarchar(120) for Name.

Use Case: 
The main use case for this table is to store and manage different media types in a database, allowing for easy retrieval and organization of media information.

Schema: 
CREATE TABLE [MediaType]
(
    [MediaTypeId] INTEGER  NOT NULL,
    [Name] NVARCHAR(120),
    CONSTRAINT [PK_MediaType] PRIMARY KEY  ([MediaTypeId])
)

Sample:
{'MediaTypeId': 1, 'Name': 'MPEG audio file'}
{'MediaTypeId': 2, 'Name': 'Protected AAC audio file'}
{'MediaTypeId': 3, 'Name': 'Protected MPEG-4 video file'}
{'MediaTypeId': 4, 'Name': 'Purchased AAC audio file'}
{'MediaTypeId': 5, 'Name': 'AAC audio file'}


Table: Playlist

Description: 
The Playlist table stores information about different music playlists, including a unique identifier (PlaylistId) and the playlist name. It has one primary key (PlaylistId) and one column (Name) to store the playlist name. The Name column has a maximum length of 120 characters.

Use Case: 
The main use case for this table is to manage and store user-created playlists, allowing users to easily create, edit, and delete playlists, and associate them with their respective music content.

Schema: 
CREATE TABLE [Playlist]
(
    [PlaylistId] INTEGER  NOT NULL,
    [Name] NVARCHAR(120),
    CONSTRAINT [PK_Playlist] PRIMARY KEY  ([PlaylistId])
)

Sample:
{'PlaylistId': 1, 'Name': 'Music'}
{'PlaylistId': 2, 'Name': 'Movies'}
{'PlaylistId': 3, 'Name': 'TV Shows'}
{'PlaylistId': 4, 'Name': 'Audiobooks'}
{'PlaylistId': 5, 'Name': '90’s Music'}


Table: PlaylistTrack

Description: 
The PlaylistTrack table stores the many-to-many relationship between playlists and tracks. It contains two columns: PlaylistId (the ID of the playlist) and TrackId (the ID of the track), both of which are integer data types. The table has a primary key constraint on both columns, ensuring a unique combination of playlist and track IDs. Foreign key constraints are also in place to link the playlist and track IDs to their respective tables in the database.

Use Case: 
The main use case for this table is to manage playlist tracks, allowing users to add or remove tracks from playlists. It supports the creation of multiple playlists with multiple tracks each, and provides a mechanism for enforcing data integrity through foreign key constraints.

Schema: 
CREATE TABLE [PlaylistTrack]
(
    [PlaylistId] INTEGER  NOT NULL,
    [TrackId] INTEGER  NOT NULL,
    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY  ([PlaylistId], [TrackId]),
    FOREIGN KEY ([PlaylistId]) REFERENCES [Playlist] ([PlaylistId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([TrackId]) REFERENCES [Track] ([TrackId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'PlaylistId': 1, 'TrackId': 3402}
{'PlaylistId': 1, 'TrackId': 3389}
{'PlaylistId': 1, 'TrackId': 3390}
{'PlaylistId': 1, 'TrackId': 3391}
{'PlaylistId': 1, 'TrackId': 3392}


Table: Track

Description: 
The Track table stores information about individual music tracks, including track ID, name, album ID, media type ID, genre ID, composer, milliseconds, bytes, and unit price. The table has foreign key constraints to maintain relationships with the Album and Genre tables.

Use Case: 
The main use case for this table is to manage and store information about individual music tracks, enabling the retrieval and manipulation of track data in a database.

Schema: 
CREATE TABLE [Track]
(
    [TrackId] INTEGER  NOT NULL,
    [Name] NVARCHAR(200)  NOT NULL,
    [AlbumId] INTEGER,
    [MediaTypeId] INTEGER  NOT NULL,
    [GenreId] INTEGER,
    [Composer] NVARCHAR(220),
    [Milliseconds] INTEGER  NOT NULL,
    [Bytes] INTEGER,
    [UnitPrice] NUMERIC(10,2)  NOT NULL,
    CONSTRAINT [PK_Track] PRIMARY KEY  ([TrackId]),
    FOREIGN KEY ([AlbumId]) REFERENCES [Album] ([AlbumId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([GenreId]) REFERENCES [Genre] ([GenreId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([MediaTypeId]) REFERENCES [MediaType] ([MediaTypeId]) 
		ON DELETE NO ACTION ON UPDATE NO ACTION
)

Sample:
{'TrackId': 1, 'Name': 'For Those About To Rock (We Salute You)', 'AlbumId': 1, 'MediaTypeId': 1, 'GenreId': 1, 'Composer': 'Angus Young, Malcolm Young, Brian Johnson', 'Milliseconds': 343719, 'Bytes': 11170334, 'UnitPrice': 0.99}
{'TrackId': 2, 'Name': 'Balls to the Wall', 'AlbumId': 2, 'MediaTypeId': 2, 'GenreId': 1, 'Composer': 'U. Dirkschneider, W. Hoffmann, H. Frank, P. Baltes, S. Kaufmann, G. Hoffmann', 'Milliseconds': 342562, 'Bytes': 5510424, 'UnitPrice': 0.99}
{'TrackId': 3, 'Name': 'Fast As a Shark', 'AlbumId': 3, 'MediaTypeId': 2, 'GenreId': 1, 'Composer': 'F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman', 'Milliseconds': 230619, 'Bytes': 3990994, 'UnitPrice': 0.99}
{'TrackId': 4, 'Name': 'Restless and Wild', 'AlbumId': 3, 'MediaTypeId': 2, 'GenreId': 1, 'Composer': 'F. Baltes, R.A. Smith-Diesel, S. Kaufman, U. Dirkscneider & W. Hoffman', 'Milliseconds': 252051, 'Bytes': 4331779, 'UnitPrice': 0.99}
{'TrackId': 5, 'Name': 'Princess of the Dawn', 'AlbumId': 3, 'MediaTypeId': 2, 'GenreId': 1, 'Composer': 'Deaffy & R.A. Smith-Diesel', 'Milliseconds': 375418, 'Bytes': 6290521, 'UnitPrice': 0.99}
